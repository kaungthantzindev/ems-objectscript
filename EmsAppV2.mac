ROUTINE EmsAppV2

#; ^EmpDto is Employee Data Transfer Object
#; ^Employee is Employee model global data
#; ^EmsCursorPosition is a $Y position of each input (eg. ^EmsCursorPosition("empNumber") -> is recorded cursor position of employee number input

Main
    Write #
    Write "=========================="
    Write !!, "＊＊＊社員登録PG＊＊＊", !!
    Do Start

    Kill ^EmsCursorPosition, ^EmpDto, ^OperationKey
    Quit

Start
    Try {
        Do SetCurrentInputMode("new")
        Do Input("empNumber")
        Do Input("kanjiName")
        Do Input("kanaName")
        Do Input("address")
        Do Input("operationKey", "!")
        Quit
    }
    Catch ex {
        Write ""
    }


#; 
Input(type, newline = "") {
    If newline '="" {
        Write @newline
    }
    While (1) {
        Write ?4, $SELECT(
            type = "empNumber" : "1. 社員番号 ＝ ",
            type = "kanjiName" : "2. 氏名漢字 ＝ ",
            type = "kanaName" : "3. 氏名カナ ＝ ",
            type = "address" : "4. 住　　所 ＝ ",
            type = "operationKey" : "<@:登録 -:削除 /:↑ //:番号 $:終了 行>: "
        )
        Do SetEscape("[K")
        Read inputValue
        Set ^EmsCursorPosition(type) = $Y
        Set ^CurrentInputField = type
       
       If inputValue ="" {
            If ($$GetCurrentInputMode() = "edit") && (type '= "operationKey") {
                Do SetDefaultValue(inputValue , type)
                Write !
                Quit
            }
       }
        
        If inputValue = "/" {
            Do HandleMoveUp(inputValue, type)
            Continue
        }

        If inputValue = "//" {
            Do HandleMoveToStart(inputValue , type)
        }

        If '$$IsValidate(inputValue, type) {
            Do ShowValidationErrorMessage($SELECT(
                type = "empNumber" : "Invalid Emp Number",
                type = "kanjiName" : "Invalid Kanji Name",
                type = "kanaName" : "Invalid Kana Name",
                type = "address" : "Invalid address",
                type = "operationKey" : "Invalid Opeartion Key"
            ))
            Do SetCursorWithoutClear(^EmsCursorPosition(type))
            Hang 1
            Do SetEscape("[K")
        } Else {
            Write !
            Set tempGlobal = $$GetCurrentGlobalName(type)
            Set @tempGlobal = inputValue

            If type = "empNumber" {
                Do ShowExistingData(inputValue)
            }

            If type = "operationKey" {
                Do Operation(inputValue)
            }
            Quit
        }
    }
}

HandleMoveUp(inputValue, type) {
    Do SetEscape("[D")
    Do SetCurrentInputMode("edit")
    Do SetDefaultValue(inputValue, type)

    Set previousInputField = $$GetPreviousInputField(type)
    If previousInputField '= "" {
        Do SetCursor(^EmsCursorPosition(previousInputField))
        If type = "operationKey" {
            #; clear operation input line
            Write $CHAR(27)_"[0J"
        }
        Do Input(previousInputField)
    }
}

HandleMoveToStart(inputValue, type) {
    Do SetEscape("[2D")
    Do SetCurrentInputMode("edit")
    Do SetDefaultValue(inputValue , type)

    Do SetCursor(^EmsCursorPosition("empNumber"))
    Do Input("empNumber")
    Set nextInputField = $$GetNextInputField(^CurrentInputField)
    While (nextInputField '= "") {
        Set nextInputField = $$GetNextInputField(^CurrentInputField)
        If nextInputField '= "" {
            If type = "operationKey" {
                #; clear operation input line
                Write $CHAR(27)_"[0J"
            }
            Do Input(nextInputField)
        }
    } 
}

SetDefaultValue(inputValue, type) {
    Set defaultValue = $$GetCurrentDefaultValue(type)
    Set inputValue = defaultValue
    Write inputValue
    Quit
}

Operation(key) {
    If key = "@" {
        Do Create
    }

    If key = "DEL" {
        Do Delete(^EmpDto("empNumber"))
    }

    If key = "$" {
        Throw ##class(%Exception.General).%New("err")
    }

    Quit
}

ShowExistingData(id) {
    If '$DATA(^Employee(id)) {
        Do SetCurrentInputMode("new")
        Quit
    }

    Do SetCurrentInputMode("edit")

    Set ^EmpDto("empNumber") = $GET(^Employee(id))

    Do DisplayData("kanjiName", id)

    Do DisplayData("kanaName", id)

    Do DisplayData("address", id)

    Do Input("operationKey", "!!")

    Quit
}

DisplayData(type , id) {
    If type '= "kanjiName" Write !
    Write ?4, $SELECT(
        type = "kanjiName": "2. 氏名漢字 ＝ ",
        type = "kanaName": "3. 氏名カナ ＝ ",
        type = "address": "4. 住　　所 ＝ ",
        1: ""
    ), $GET(^Employee(id, type))
    Set ^EmsCursorPosition(type) = $Y
    Set ^EmpDto(id, type) = $GET(^Employee(id, type))
    Do SetEscape("[K")
}

Create() {
    Set id = $GET(^EmpDto("empNumber"))
    Set ^Employee(id) = $GET(^EmpDto("empNumber"))
    Set ^Employee(id, "kanjiName") = $GET(^EmpDto(id, "kanjiName"))
    Set ^Employee(id, "kanaName") = $GET(^EmpDto(id, "kanaName"))
    Set ^Employee(id, "address") = $GET(^EmpDto(id, "address"))

    Do ShowMessage("Success")
    Quit
}

Delete(id) {
    If '$DATA(^Employee(id)) {
        Do ShowMessage("❌ Unregistered data", "error")
        Quit
    }

    Kill ^Employee(id)
    Do ShowMessage("Success")
    Quit
}

SetCursor(row)
    Set row = row + 1
    Write $CHAR(27)_"["_row_";"_5_"H"
    Set $Y = row - 1
    #; Write $CHAR(27)_"[0J"
    Quit

SetCursorWithoutClear(row)
    Set row = row + 1
    Write $CHAR(27)_"["_row_";"_5_"H"
    Set $Y = row - 1
    #; Write $CHAR(27)_"[0J"
    Quit

SetEscape(key) {
    Write $CHAR(27)_key
    Quit
}

GetCurrentInputMode() {
    Return $GET(^||InputMode)
}

SetCurrentInputMode(mode = "new") {
    Set ^||InputMode = mode
}

GetCurrentGlobalName(type) {
    Return $SELECT(
        type = "empNumber": $NAME(^EmpDto(type)),
        type = "operationKey": $NAME(^OperationKey),
        1: $NAME(^EmpDto(^EmpDto("empNumber"), type))
    )
}

GetCurrentDefaultValue(type) {
    Return $SELECT(
        type = "empNumber": $GET(^EmpDto("empNumber")),
        1: $GET(^EmpDto(^EmpDto("empNumber"), type))
    )
}

GetPreviousInputField(current) {
    Return $SELECT(
        current = "empNumber": "",
        current = "kanjiName": "empNumber",
        current = "kanaName" : "kanjiName",
        current = "address" : "kanaName",
        current = "operationKey": "address",
        1: ""
    )
}

GetNextInputField(current) {
    Return $SELECT(
        current = "empNumber": "kanjiName",
        current = "kanjiName": "kanaName",
        current = "kanaName": "address",
        current = "address": "operationKey",
        current = "operationKey": "",
        1: ""
    )
}

ShowValidationErrorMessage(msg) {
    Write ?34, $CHAR(27)_"[1m"_$CHAR(27)_"[31m"_msg_$CHAR(27)_"[0m"
    Quit
}

IsValidOperationKey(value) {
    If (value = "@") || (value = "/") || (value = "//") || (value = "DEL") || (value = "$") {
        Quit 1
    }

    Quit 0
}

IsValidEmpNumber(value) {
    If (value'?1n.N) || (value < 0) || (value > 9999) {
        Quit 0
    }
    Quit 1
}
IsZenkaku(value) {
    If $MATCH(value, "^[一-龥ぁ-んァ-ヶー　]+$") {
        Quit 1
    }
    Quit 0
}

IsZenkakuOrAlphabet(value) {
    If $MATCH(value, "^[一-龥ぁ-んァ-ヶー　]+$") || $MATCH(value, "^[A-Za-z]+$") {
        Quit 1
    }
    Quit 0
}

IsHankaku(value) {
    If $MATCH(value, "^[ｦ-ﾟ ｡-ﾟ]+$") {
        Quit 1
    }
    Quit 0
}

IsValidate(value, type) {
    If (type = "empNumber") {
        Return $$IsValidEmpNumber(value)
    }

    If (type = "kanjiName") {
        Return $$IsZenkaku(value)
    }

    If (type = "kanaName") {
        Return $$IsHankaku(value)
    }

    If (type = "address") {
        Return $$IsZenkakuOrAlphabet(value)
    }

    If (type = "operationKey") {
        Return $$IsValidOperationKey(value)
    }
}

ShowMessage(msg, type = "success")
    #; 31m -> red
    #; 32m -> green
    Set color = $SELECT(
        type = "error": "[31m",
        1: "[32m"
    )
    Write #
    Write $CHAR(27)_"[1m"_$CHAR(27)_color_"###################################", !
    Write ?10 , msg, !
    Write "###################################"_$CHAR(27)_"[0m"
    Hang 1
    Kill ^EmpDto, ^EmsCursorPosition, ^OperationKey
    Write #
    Goto Main
    Quit