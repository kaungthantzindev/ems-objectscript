ROUTINE EmsAppV3
#Include V3Macros ##; Data format -> Employee(1111) = "1111/春/ｶｳﾝ/address", ^||EmpDto is Employee Data Transfer Object to store temporary values.
1; 社員番号
2; 氏名漢字
3; 氏名カナ
4; 住　　所
5; <@:登録 -:削除 /:↑ //:番号 $:終了 行>
Main
    Do CleanUp
    Write #
    Write "=========================="
    Write !!, "＊＊＊社員登録PG＊＊＊", !!
    Try {
        For i = 1:1:5 {
            Quit:$GET(^||ShouldQuit)=1
            Do Prompt(i)
        }
    }
    Catch e {
        Do e.Log()
        Quit
    }
    Quit

Prompt(key) {
    While 1 {
        Set inputValue = $$GetInputValue(key)

        If inputValue ="" {
            If ($$GetCurrentInputMode() = "edit") && (key '= 5) {
                Do SetDefaultValue(inputValue , key)
                Write !
                Quit
            }
        }

        If inputValue = "/" Do MoveUp(inputValue, key) Continue
        If inputValue = "//"  Do MoveToStart(inputValue , key)
        
        If '$$IsValidate(inputValue, key) {
            Do ShowValidationError(key)
        } Else {
            Do SaveInputValue(inputValue, key)
            Quit
        }
    }
    Quit
}

GetInputValue(key) {
    Write ?4, key_". "_$$GetLabelText(key)_" = "
    $$$ClearRight
    Read inputValue
    Set @$$$CursorPosition = $Y
    Set ^||CurrentInputField = key
    Return inputValue 
}

GetLabelText(key) public {
    Quit $PIECE($TEXT(@key), "; ", 2)
}

ShowValidationError(key) {
    Write $JUSTIFY($$ValidationErrorMessage(key), 40)
    Do SetCursor($GET(@$$$CursorPosition))
    Hang 1
    $$$ClearRight
}

SaveInputValue(inputValue, key) {
    Write !
    Set @$$GetCurrentGlobalName(key) = inputValue
    If key = 1 Do ShowExistingData(inputValue)
    If key = 5 Do Operation(inputValue)
}

GetCurrentGlobalName(key) public {
    Return $CASE(key,
        1: $NAME(^||EmpDto($$GetLabelText(key))),
        5: $NAME(^||OperationKey),
        : $NAME(^||EmpDto(@$$$EmpDtoID, $$GetLabelText(key)))
    )
}

ShowExistingData(id)  {
    If '$DATA(^Employee(id)) { Do SetCurrentInputMode("new") Quit }
    Do SetCurrentInputMode("edit")
    Set @$$$EmpDtoID = $PIECE($GET(^Employee(id)), "/", 1)
    For i=2:1:4 {
        Set ^||EmpDto(id, $$GetLabelText(i)) = $PIECE($GET(^Employee(id)), "^", i)
        Do DisplayData(i, id)
    }
    Write !
    Do Prompt(5)
    Quit
}

DisplayData(key , id) {
    If key '= 2 Write !
    Write ?4, key_". "_$$GetLabelText(key)_" = "_$PIECE($GET(^Employee(id)), "/", key)
    Set @$$$CursorPosition = $Y
    Set ^||EmpDto(id, $$GetLabelText(key)) = $PIECE($GET(^Employee(id)), "/", key)
    Do SetEscape("[K")
}

Create() {
    Set ID = $GET(@$$$EmpDtoID)
    Set record = ID
    For i = 2:1:4 {
        Set record = record_"/"_$GET(^||EmpDto(ID, $$GetLabelText(i)))
    }
    Set ^Employee(ID) = record
    Do ShowMessage("success")
    Quit
}

Delete() {
    Set ID = $GET(@$$$EmpDtoID)
    If '$DATA(^Employee(ID)) Do ShowMessage("Unregistered data!", "error") Quit
    Kill ^Employee(ID)
    Do ShowMessage("success")
    Quit
}

SetEscape(key) {
    Write $CHAR(27)_key
}

SetCursor(row)
    Set row = row + 1
    Write $CHAR(27)_"["_row_";"_5_"H"
    Set $Y = row - 1
    Quit

MoveUp(inputValue, key) {
    Do SetEscape("[D")
    Do SetCurrentInputMode("edit")
    Do SetDefaultValue(inputValue, key)
    Set previousInputField = $$GetPreviousInputField(key)
    If previousInputField '= 0 {
        Do SetCursor($GET(^||CursorPosition($$GetLabelText(previousInputField))))
        If key = 5 $$$ClearDown ##; clear operation input 
        Do Prompt(previousInputField)
    }
}

MoveToStart(inputValue, type) {
    Do SetEscape("[2D")
    Do SetCurrentInputMode("edit")
    Do SetDefaultValue(inputValue , type)
    Do SetCursor(^||CursorPosition($$GetLabelText(1)))
    Do Prompt(1)
    Set nextInputField = $$GetNextInputField(^||CurrentInputField)
    While (nextInputField '= 0) {
        Set nextInputField = $$GetNextInputField(^||CurrentInputField)
        If nextInputField '= 0 {
            If type = 5 $$$ClearDown
            Do Prompt(nextInputField)
        }
    } 
}

GetPreviousInputField(key) {
    Quit $CASE(key, 1: 0, :key - 1)
}

GetNextInputField(key) {
    Quit $CASE(key, 5: 0, : key + 1)
}

GetCurrentInputMode() {
    Return $GET(^||InputMode)
}

SetCurrentInputMode(mode = "new") {
    Set ^||InputMode = mode
}

GetCurrentDefaultValue(key) {
    Return $SELECT(
        key = 1: $GET(@$$$EmpDtoID),
        1: $GET(^||EmpDto(@$$$EmpDtoID, $$GetLabelText(key)))
    )
}

SetDefaultValue(inputValue, type) {
    Set defaultValue = $$GetCurrentDefaultValue(type)
    Set inputValue = defaultValue
    Write inputValue
    Quit
}

Operation(inputValue) {
    If inputValue = "@" Do Create
    If inputValue = "DEL" Do Delete
    If inputValue = "$" Set ^||ShouldQuit = 1 Quit
    Quit
}

IsValidate(value, key) {
    Quit $CASE(key,
        1: $$IsValidEmpNumber(value),
        2: $$IsZenkaku(value),
        3: $$IsHankaku(value),
        4: $$IsZenkakuOrAlphabet(value),
        5: $$IsValidOperationKey(value)
    )
}

IsValidOperationKey(value) {
    If (value = "@") || (value = "/") || (value = "//") || (value = "DEL") || (value = "$") { Quit 1 }
    Quit 0
}

IsValidEmpNumber(value) {
    If (value'?1n.N) || (value < 0) || (value > 9999) { Quit 0 }
    Quit 1
}

IsZenkaku(value) {
    If $MATCH(value, "^[一-龥ぁ-んァ-ヶー　]+$") { Quit 1 }
    Quit 0
}

IsZenkakuOrAlphabet(value) {
    If $MATCH(value, "^[一-龥ぁ-んァ-ヶー　]+$") || $MATCH(value, "^[A-Za-z]+$") { Quit 1 }
    Quit 0
}

IsHankaku(value) {
    If $MATCH(value, "^[ｦ-ﾟ ｡-ﾟ]+$") { Quit 1 }
    Quit 0
}

ValidationErrorMessage(key) {
    Return $$$RED_$CASE(key,
        1:"Invalid EmployeeNumber",
        2:"Invalid Kanji Name",
        3:"Invalid Kana Name",
        4:"Invalid address",
        5:"Invalid Operation key"
    )_$$$BLACK
}

ShowMessage(msg, type = "success") {
    Set color = $SELECT(type = "error": $$$RED, 1: $$$GREEN)
    Write #
    Write color_"###################################", !
    Write ?10 , msg, !
    Write "###################################"_$$$BLACK
    Hang 1
    Write #
    Do Main
    Quit
}

CleanUp
    Kill ^||EmpDto, ^||CurrentInputField, ^||CursorPosition, ^||InputMode, ^||ShouldQuit