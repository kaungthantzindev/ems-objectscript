ROUTINE EmsAppV3
#Include V3Macros ##; Data format -> Employee(1111) = "1111/春/ｶｳﾝ/address", ^||EmpDto is Employee Data Transfer Object to store temporary values.
1; 社員番号
2; 氏名漢字
3; 氏名カナ
4; 住　　所
5; <@:登録 -:削除 /:↑ //:番号 $:終了 行>
Main
    K ^||EmpDto, ^||CurrentInputField, ^||CursorPosition, ^||InputMode 
    W #
    W "=========================="
    W !!, "＊＊＊社員登録PG＊＊＊", !!
    Try {
        F i = 1:1:5 {
        D Input(i)
        }
    }
    Catch e {
        I e.Name = "quit" { W "Bye!" Q }
        W e.OnAsStatus()
        Q
    }
    Q

Input(key) {
    While 1 {
        W ?4, key_". "_$$GetLabelText(key)_" = "
        $$$ClearRight
        R inputValue
        S @$$$CursorPosition = $Y
        S ^||CurrentInputField = key 

        I inputValue ="" {
            I ($$GetCurrentInputMode() = "edit") && (key '= 5) {
                D SetDefaultValue(inputValue , key)
                W !
                Q
            }
       }

        I inputValue = "/" D MoveUp(inputValue, key) Continue

        I inputValue = "//"  D MoveToStart(inputValue , key)
        
        I '$$IsValidate(inputValue, key) {
            W $JUSTIFY($$ValidationErrorMessage(key), 40)
            D SetCursor($GET(@$$$CursorPosition))
            H 1
            $$$ClearRight
        } Else {
            W !
            S @$$GetCurrentGlobalName(key) = inputValue
            I key = 1 D ShowExistingData(inputValue)
            I key = 5 D Operation(inputValue)
            Q
        }
    }
    Q
}

GetCurrentGlobalName(key) public {
    Ret $CASE(key,
        1: $NAME(^||EmpDto($$GetLabelText(key))),
        5: $NAME(^||OperationKey),
        : $NAME(^||EmpDto(^||EmpDto($$GetLabelText(1)), $$GetLabelText(key)))
    )
}

GetLabelText(key) public {
    Q $PIECE($TEXT(@key), "; ", 2)
}

SetEscape(key) {
    W $CHAR(27)_key
}

SetCursor(row)
    S row = row + 1
    W $CHAR(27)_"["_row_";"_5_"H"
    S $Y = row - 1
    Q

MoveUp(inputValue, key) {
    D SetEscape("[D")
    D SetCurrentInputMode("edit")
    D SetDefaultValue(inputValue, key)
    S previousInputField = $$GetPreviousInputField(key)
    I previousInputField '= 0 {
        D SetCursor($GET(^||CursorPosition($$GetLabelText(previousInputField))))
        I key = 5 $$$ClearDown ##; clear operation input 
        D Input(previousInputField)
    }
}

MoveToStart(inputValue, type) {
    D SetEscape("[2D")
    D SetCurrentInputMode("edit")
    D SetDefaultValue(inputValue , type)
    D SetCursor(^||CursorPosition($$GetLabelText(1)))
    D Input(1)
    S nextInputField = $$GetNextInputField(^||CurrentInputField)
    While (nextInputField '= "") {
        S nextInputField = $$GetNextInputField(^||CurrentInputField)
        I nextInputField '= "" {
            I type = 5 $$$ClearDown
            D Input(nextInputField)
        }
    } 
}

GetPreviousInputField(key) {
    Q $CASE(key, 1: 0, :key - 1)
}

GetNextInputField(key) {
    Q $CASE(key, 5: 0, : key + 1)
}

GetCurrentInputMode() {
    Ret $GET(^||InputMode)
}

SetCurrentInputMode(mode = "new") {
    S ^||InputMode = mode
}

GetCurrentDefaultValue(key) {
    Ret $SELECT(
        key = 1: $GET(@$$$EmpDtoID),
        1: $GET(^||EmpDto(@$$$EmpDtoID, $$GetLabelText(key)))
    )
}

SetDefaultValue(inputValue, type) {
    S defaultValue = $$GetCurrentDefaultValue(type)
    S inputValue = defaultValue
    W inputValue
    Q
}

ShowExistingData(id)  {
    I '$DATA(^Employee(id)) { D SetCurrentInputMode("new") Q }
    D SetCurrentInputMode("edit")
    S @$$$EmpDtoID = $PIECE($GET(^Employee(id)), "/", 1)
    F i=2:1:4 {
        S ^||EmpDto(id, $$GetLabelText(i)) = $PIECE($GET(^Employee(id)), "^", i)
        D DisplayData(i, id)
    }
    W !
    D Input(5)
    Q
}

DisplayData(key , id) {
    I key '= 2 W !
    W ?4, key_". "_$$GetLabelText(key)_" = "_$PIECE($GET(^Employee(id)), "/", key)
    S @$$$CursorPosition = $Y
    S ^||EmpDto(id, $$GetLabelText(key)) = $PIECE($GET(^Employee(id)), "/", key)
    D SetEscape("[K")
}

Create() {
    S ID = $GET(@$$$EmpDtoID)
    S record = ID
    F i = 2:1:4 {
        S record = record_"/"_$GET(^||EmpDto(ID, $$GetLabelText(i)))
    }
    S ^Employee(ID) = record
    D ShowMessage("success")
    Q
}

Delete() {
    S ID = $GET(@$$$EmpDtoID)
    I '$DATA(^Employee(ID)) D ShowMessage("Unregistered data!", "error") Q
    K ^Employee(ID)
    D ShowMessage("success")
    Q
}

Operation(inputValue) {
    I inputValue = "@" D Create
    I inputValue = "DEL" D Delete
    I inputValue = "$" Throw ##class(%Exception.General).%New("quit")
    Q
}

IsValidate(value, key) {
    Q $CASE(key,
        1: $$IsValidEmpNumber(value),
        2: $$IsZenkaku(value),
        3: $$IsHankaku(value),
        4: $$IsZenkakuOrAlphabet(value),
        5: $$IsValidOperationKey(value)
    )
}

IsValidOperationKey(value) {
    I (value = "@") || (value = "/") || (value = "//") || (value = "DEL") || (value = "$") { Q 1 }
    Q 0
}

IsValidEmpNumber(value) {
    I (value'?1n.N) || (value < 0) || (value > 9999) { Q 0 }
    Q 1
}

IsZenkaku(value) {
    I $MATCH(value, "^[一-龥ぁ-んァ-ヶー　]+$") { Q 1 }
    Q 0
}

IsZenkakuOrAlphabet(value) {
    I $MATCH(value, "^[一-龥ぁ-んァ-ヶー　]+$") || $MATCH(value, "^[A-Za-z]+$") { Q 1 }
    Q 0
}

IsHankaku(value) {
    I $MATCH(value, "^[ｦ-ﾟ ｡-ﾟ]+$") { Q 1 }
    Q 0
}

ValidationErrorMessage(key) {
    Ret $$$RED_$CASE(key,
        1:"Invalid EmployeeNumber",
        2:"Invalid Kanji Name",
        3:"Invalid Kana Name",
        4:"Invalid address"
    )_$$$BLACK
}

ShowMessage(msg, type = "success") {
    S color = $SELECT(type = "error": $$$RED, 1: $$$GREEN)
    W #
    W color_"###################################", !
    W ?10 , msg, !
    W "###################################"_$$$BLACK
    H 1
    K ^||EmpDto, ^||CurrentInputField, ^||CursorPosition, ^||InputMode
    W #
    G Main^EmsAppV3
    Q
}